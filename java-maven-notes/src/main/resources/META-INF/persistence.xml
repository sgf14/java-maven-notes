<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
        http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1">

<!-- example persistence.xml file, change table names/remove comments as required.  Template from entity-mappings java project-->
<!-- Make sure you alter the app server context.xml AND you modified the correct one -->
<!-- context.xml has the db specific details along with the driver info and per typical model its on the web server-not in the app itself -->
<!-- see JWA chap 19, pg xxx, approx 574 context.xml holds the JNDI Resource tagset w/ db connection info-->
<!-- if launching from Eclipse it has to be the Eclipse implementation of Tomcat server, not the base Program Files/Apache/.. version -->
<!-- this unit name immediately below MUST match context.xml Resource name, less the jdbc/ portion -->

    <persistence-unit name="EntityMappings" transaction-type="RESOURCE_LOCAL">
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
        <non-jta-data-source>
            java:comp/env/jdbc/EntityMappings
        </non-jta-data-source>
        <exclude-unlisted-classes>false</exclude-unlisted-classes>
        <shared-cache-mode>ENABLE_SELECTIVE</shared-cache-mode>
        <validation-mode>NONE</validation-mode>
        <properties>
            <property name="javax.persistence.schema-generation.database.action"
                      value="none" />
        </properties>
    </persistence-unit>
<!-- Some of the common persistence acronyms- see Tomcat website/ Persistence section.  see JWA chap 19,20 and 21, 
JNDI = Java Naming & Directory Interface. directs to right db- context.xml

JPA = Java Persistence API.  Persistence code- Spring extends this, per chap 21.

JDBC = Java DataBase Connectivity. this is the driver needed to connect to db. It is specific to the product (MySQL in this case).  it is 
specified within context.xml as driverClassName property.

DBCP= DataBase Connectivity Pool- tomcat specific, creates connection pool similar to thread pool which java uses to persist data
like thread pool you want to only create a certain number of these and reuse them.  see context.xml
-->
</persistence>