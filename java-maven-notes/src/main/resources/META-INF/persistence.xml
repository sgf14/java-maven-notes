<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
        		http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1">


<!-- connectivity to established server database -->
	<!-- J2EE Book example Glassfish server- Hibernate.  -->
	<!-- App launches properly with this.  Using this hibernate verion for now.  eclipse version below also works-->
    <persistence-unit name="EntityMappings" transaction-type="RESOURCE_LOCAL">    	 
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>     
        <jta-data-source>jdbc/EntityMappings</jta-data-source>        
        <exclude-unlisted-classes>false</exclude-unlisted-classes>
        <shared-cache-mode>ENABLE_SELECTIVE</shared-cache-mode>
        <validation-mode>NONE</validation-mode>
        <properties>
            <property name="javax.persistence.schema-generation.database.action"
                      value="none" />
        </properties>
        
    </persistence-unit>
    
    
    <!-- J2EE Book example Glassfish server- Tophat/eclipse provider version.  -->
	<!-- App also launches properly with this.  note different transaction type and provider.  
	try the exclude-unlisted-classes tagset.  this version did work better for troubleshooting cnx error better
	there was more specific detail.  hibernate only lists null pointer exception, wasnt very helpful-->
    <persistence-unit name="EntityMappings" transaction-type="JTA">    	     	 
        <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>           
        <jta-data-source>jdbc/EntityMappings</jta-data-source>
        <!-- entity classes. Could do one entity at a time- or the exclude tag       
        <class>com.prod.C12_dao.entities.Author</class>
        -->
        <exclude-unlisted-classes>false</exclude-unlisted-classes>        
    </persistence-unit>
    
    <!-- Java for web book version- Tomcat server. confirmed this works.  Must swap these if using Tomcat server instead of glassfish
    <persistence-unit name="EntityMappings" transaction-type="RESOURCE_LOCAL">
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
        <non-jta-data-source>java:comp/env/jdbc/EntityMappings</non-jta-data-source>
        <exclude-unlisted-classes>false</exclude-unlisted-classes>
        <shared-cache-mode>ENABLE_SELECTIVE</shared-cache-mode>
        <validation-mode>NONE</validation-mode>
        <properties>
            <property name="javax.persistence.schema-generation.database.action"
                      value="none" />
        </properties>
    </persistence-unit>
     -->     
    
    
<!-- Some of the common persistence acronyms- see Tomcat website/ Persistence section.  see JWA chap 19,20 and 21, 
JNDI = Java Naming & Directory Interface. directs to right db- context.xml for Tomcat.  in localhost:4848 admin console in glassfish.

JPA = Java Persistence API.  Persistence code- Spring extends this, per chap 21.

JDBC = Java DataBase Connectivity. this is the driver needed to connect to db. It is specific to the product (MySQL in this case).  it is 
specified within context.xml as driverClassName property.

DBCP= DataBase Connectivity Pool- tomcat specific, creates connection pool similar to thread pool which java uses to persist data
like thread pool you want to only create a certain number of these and reuse them.  see context.xml
-->
</persistence>